<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: browser | Jerome Etienne.js Blog]]></title>
  <link href="http://blog.jetienne.com/blog/categories/browser/atom.xml" rel="self"/>
  <link href="http://blog.jetienne.com/"/>
  <updated>2013-04-24T06:00:26+02:00</updated>
  <id>http://blog.jetienne.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MicroCache.js - Cache Micro Library]]></title>
    <link href="http://blog.jetienne.com/blog/2011/09/05/microcache.js/"/>
    <updated>2011-09-05T00:00:00+02:00</updated>
    <id>http://blog.jetienne.com/blog/2011/09/05/microcache.js</id>
    <content type="html"><![CDATA[<p><strong>microcache.js</strong> is a micro library to handle in-memory cache. It is less than
20 lines and works in node and browser.
It is available on github <a href='https://github.com/jeromeetienne/microcache.js'>here</a>
under <a href='https://github.com/jeromeetienne/microcache.js/blob/master/MIT-LICENSE.txt'>MIT license</a>.
If you hit bugs, fill issues on github. Feel free to fork, modify and have fun with it :)</p>

<h2>Install it</h2>

<p>To install it on node</p>

<p>```bash</p>

<pre><code>npm install microcache
</code></pre>

<p>```</p>

<p>To install the browser version, download it and include it like that</p>

<p>```html</p>

<pre><code>&lt;script src="microcache.js"&gt;&lt;/script&gt;   
</code></pre>

<p>```</p>

<!-- more -->


<h2>API</h2>

<p>To instanciate a cache, do the following. You can have as many instances you want.</p>

<p>```javascript</p>

<pre><code>var microcache = new MicroCache();
</code></pre>

<p>```</p>

<h3>.get(key)</h3>

<p>To get a cached asset which is in the cache. Each cached element has a unique
key to identify it.</p>

<p>```javascript</p>

<pre><code>microcache.get('foo');
</code></pre>

<p>```</p>

<h3>.set(key, value)</h3>

<p>To set a element value in the cache.</p>

<p>```javascript</p>

<pre><code>microcache.set('foo', 'bar');
</code></pre>

<p>```</p>

<h3>.contains(key)</h3>

<p>To know if a given asset is currently in the cache.</p>

<p>```javascript</p>

<pre><code>microcache.contains('foo');
</code></pre>

<p>```</p>

<h3>.values()</h3>

<p>To return all the elements currently in the cache</p>

<p>```javascript</p>

<pre><code>microcache.values();
</code></pre>

<p>```</p>

<h3>.getSet(key, value)</h3>

<p>To get an element from the cache, if it isnt already present, store it then return it</p>

<p>```javascript</p>

<pre><code>microcache.getSet(key, value);
</code></pre>

<p>```</p>

<h2>FAQ</h2>

<ul>
<li><strong>Q.</strong> what about plain <code>var microcache = {}</code> ? isnt this wrapper overengineering ?</li>
<li><strong>A.</strong>  i was thinking so too at first. but the syntax of a .getSet() without wrapper was too ugly for my taste :)
<code>var a = cache[key] = (cache[key] || value)</code> from @floriancargoet</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoWithTheFlow.js - async flow control with a zen touch]]></title>
    <link href="http://blog.jetienne.com/blog/2011/07/17/gowiththeflow.js-async-flow-control-with-a-zen-touch/"/>
    <updated>2011-07-17T00:00:00+02:00</updated>
    <id>http://blog.jetienne.com/blog/2011/07/17/gowiththeflow.js-async-flow-control-with-a-zen-touch</id>
    <content type="html"><![CDATA[<p>GoWithTheFlow.js is a javascript asynchronous flow-control micro library which works <strong>in
node.js and in browser</strong>. It allow to control how your
asynchronous code is executed, sequentially or in parallel.
Flow() is only 30lines.</p>

<h1>How to use it</h1>

<p>Let start with a basic example. 2 jobs run in sequence. The first job is a timeout
so the result is delivered asynchronously, and a second job is run only <em>after</em> the
completion of the first.</p>

<p>```javascript</p>

<pre><code>Flow().seq(function(next){
    console.log("step 1: started, it will last 1sec");
    setTimeout(function(){
        console.log("step 1: 1sec expired. Step 1 completed");
        next();
    }, 1000);
}).seq(function(next){
    console.log("step 2: run after step1 has been completed");
})
</code></pre>

<p>```</p>

<p>It will display the following</p>

<pre><code>step 1: started, it will last 1sec
step 1: 1sec expired. Step 1 completed
step 2: run after step1 has been completed
</code></pre>

<!-- more -->


<h1>Methods</h1>

<p>In order to keep it as simple as possible, Flow has only 2 methods.</p>

<h2>.seq(callback) to execute job sequentially</h2>

<p> <code>.seq()</code> is used to execute functions sequentially. The <em>callback</em> parameter
will be executed only after all previous jobs are completed.
The callback signature is <code>callback(next, error, result)</code></p>

<ul>
<li><p><code>next(error, result)</code> is the function to call when the job is completed. <em>error</em> is to notify an error
to the next job. <em>result</em> to notify a result. <em>error</em> and <em>result</em> may be omitted, if so they are considered
equal to <code>undefined</code></p></li>
<li><p><code>error</code> is the error send by previous jobs</p></li>
<li><p><code>result</code> is the result send by previous jobs</p></li>
</ul>


<p>for example</p>

<p>```javascript</p>

<pre><code>Flow().seq(function(next){
    console.log("first job");
    next(null, "result1");
}).seq(function(next, error, result){    
    console.log("second job. run *after* first job");
    next();
})
</code></pre>

<p>```</p>

<h2>.par(callback) to execute job in parallel</h2>

<p> <code>.par()</code> is used to execute functions in parallel. The <em>callback</em> parameter is the same as for <code>.seq()</code>.
If multiple .par() are declared one after another, they are run in parallel. The first <code>.seq()</code> after them
will receive all the <em>error</em> and <em>result</em> in Array. One array item per previous <code>.par()</code></p>

<p>for example</p>

<p>```javascript</p>

<pre><code>Flow().par(function(next){
    console.log("job foo");
    next(null, "foo");
}).par(function(next){
    console.log("job bar");
    next(null, "bar");
}).seq(function(next, errors, results){
    console.log("job run *after* the completion of foo and bar");
    console.assert(errors.length == 2 &amp;&amp; errors[0] === null &amp;&amp; errors[1] == null)
    console.assert(results.length == 2 &amp;&amp; results[0] === 'foo' &amp;&amp; results[1] == 'bar')
    next();
})
</code></pre>

<p>```</p>

<p>That's it</p>

<h1>Conclusion</h1>

<p>GoWithTheFlow.js is available on github <a href='https://github.com/jeromeetienne/gowiththeflow.js'>here</a>
under <a href='https://github.com/jeromeetienne/gowiththeflow.js/blob/master/MIT-LICENSE.txt'>MIT license</a>.
If you hit bugs, fill issues on github.
Feel free to fork, modify and have fun with it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cancelRequestAnimationFrame() For Paul Irish requestAnimationFrame()]]></title>
    <link href="http://blog.jetienne.com/blog/2011/05/18/cancelRequestAnimFrame-for-paul-irish-requestAnimFrame/"/>
    <updated>2011-05-18T00:00:00+02:00</updated>
    <id>http://blog.jetienne.com/blog/2011/05/18/cancelRequestAnimFrame-for-paul-irish-requestAnimFrame</id>
    <content type="html"><![CDATA[<p><a href="http://paulirish.com/">Paul Irish</a> recently
wrote <a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/">requestAnimationFrame for smart animating</a>.
It is a polyfill so people can start use requestAnimationFrame() today and still be future proof.</p>

<p>This post is about its counterpart,
<a href="http://webstuff.nfshost.com/anim-timing/Overview.html#cancelRequestAnimationFrame">cancelRequestAnimFrame()</a>.
It cancels a <a href="http://webstuff.nfshost.com/anim-timing/Overview.html#requestAnimationFrame">requestAnimationFrame()</a>,
like <a href="https://developer.mozilla.org/en/DOM/window.clearTimeout">clearTimeout</a>
cancels a <a href="https://developer.mozilla.org/en/DOM/window.setTimeout">setTimeout</a>.</p>

<!-- more -->


<h2>Step 1: how to get the code</h2>

<p>First include the <code>cancelRequestAnimFrame()</code> code in your page.</p>

<p>```javascript</p>

<pre><code>window.cancelRequestAnimFrame = ( function() {
    return window.cancelAnimationFrame          ||
        window.webkitCancelRequestAnimationFrame    ||
        window.mozCancelRequestAnimationFrame       ||
        window.oCancelRequestAnimationFrame     ||
        window.msCancelRequestAnimationFrame        ||
        clearTimeout
} )();
</code></pre>

<p>```</p>

<p>Add <code>requestAnimFrame()</code> too. It is a slightly modified version of
<a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/">paul's</a>
to return setTimeout() handle.</p>

<p>```javascript</p>

<pre><code>window.requestAnimFrame = (function(){
    return  window.requestAnimationFrame       || 
        window.webkitRequestAnimationFrame || 
        window.mozRequestAnimationFrame    || 
        window.oRequestAnimationFrame      || 
        window.msRequestAnimationFrame     || 
        function(/* function */ callback, /* DOMElement */ element){
            return window.setTimeout(callback, 1000 / 60);
        };
})();
</code></pre>

<p>```</p>

<h2>Step 2: how to use it</h2>

<p>Here is a possible way to use it.
<strong><em>Show, dont tell</em></strong>, here is a <a href="http://jsfiddle.net/ghjKC/3/">live demo</a> on jsfiddle</p>

<p>```javascript</p>

<pre><code>// to store the request
var request;

// start and run the animloop
(function animloop(){
  render();
  request = requestAnimFrame(animloop, element);
})();

// cancelRequestAnimFrame to stop the loop in 1 second
setTimeout(function(){
    cancelRequestAnimFrame(request);                
}, 1*1000)
</code></pre>

<p>```</p>

<h2>About requestAnimationFrame</h2>

<p>In the past months, much has been done for web graphics. Among them,
<a href="http://webstuff.nfshost.com/anim-timing/Overview.html">requestAnimationFrame()</a>
is used to make smoother animation while not wasting useless
rescources when not visible.
The <a href="http://webstuff.nfshost.com/anim-timing/Overview.html">spec</a> is making good
progress, and <a href="http://dev.chromium.org/developers/design-documents/requestanimationframe-implementation">several</a>
<a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame">implementations</a> are already deployed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery.acewidget - a jQuery plugin to easily embed ace]]></title>
    <link href="http://blog.jetienne.com/blog/2011/04/15/jquery.acewidget-a-jquery-plugin-to-easily-embed-ace/"/>
    <updated>2011-04-15T00:00:00+02:00</updated>
    <id>http://blog.jetienne.com/blog/2011/04/15/jquery.acewidget-a-jquery-plugin-to-easily-embed-ace</id>
    <content type="html"><![CDATA[<h1>AceWidget jQuery Plugin</h1>

<p><a href="https://github.com/jeromeetienne/acewidget/tree/master/contrib/jquery.acewidget">jquery.acewidget.js</a> is a
jQuery plugin for <a href="https://github.com/jeromeetienne/acewidget">acewidget</a>.
AceWidget is a widget which make <a href="http://mozillalabs.com/skywriter/2011/01/18/mozilla-skywriter-has-been-merged-into-ace/">ace</a>
/<a href="https://mozillalabs.com/blog/2009/02/introducing-bespin/">bespin</a> trivial to embed in your pages. The Vision is to be
super simple to embed and have no server to setup. It provides the whole official embeded api. The
code is available on github under MIT license. That's it. No fuss no muss.</p>

<p>Show dont tell, a <a href="http://jeromeetienne.github.com/acewidget/demo.html">demo of acewidget</a> and a
<a href="http://jeromeetienne.github.com/acewidget/contrib/jquery.acewidget/test.html">example of jquery.acewidget</a></p>

<h2>How to use it</h2>

<p>First you include the plugin itself in a usual script</p>

<pre><code>&lt;script type="text/javascript" src='jquery.acewidget.js'&gt;&lt;/script&gt; 
</code></pre>

<p>Then create a DOM element which gonna contains ace widget, say a div</p>

<pre><code>&lt;div id="editor"&gt;&lt;/div&gt;
</code></pre>

<p>Then you create the ace widget in this container by</p>

<pre><code>var acewidget = jQuery('#editor').acewidget();
</code></pre>

<!-- more -->


<p>You wait until it is loaded in your DOM</p>

<pre><code>acewidget.bind('load', function(){
    /* you start using it here */
})
</code></pre>

<p>After that you use it with the normal ace API</p>

<h2>API</h2>

<h3>to set a new text</h3>

<pre><code>acewidget.setValue("foobar", function(){
alert("setValue "+result.status)
})
</code></pre>

<p>The callback is optional' and notified when the action is completed.
It is <a href="http://labs.omniti.com/labs/jsend/wiki">jsend compatible</a>.</p>

<h3>to get the current text</h3>

<pre><code>acewidget.getValue(function(result){
    alert("getValue "+result.status+" text:"+result.data.data)
})
</code></pre>

<h3>to set the tab size</h3>

<pre><code>acewidget.setTabSize(8, function(result){
    alert("setTabSize "+result.status)
})
</code></pre>

<h3>to be notified when the acewidget is loaded</h3>

<pre><code>acewidget.bind('load', function(){
    alert('acewidget is loaded')
})
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery.qrcode - jquery plugin for pure browser qrcode generation]]></title>
    <link href="http://blog.jetienne.com/blog/2011/04/07/jquery-qrcode/"/>
    <updated>2011-04-07T00:00:00+02:00</updated>
    <id>http://blog.jetienne.com/blog/2011/04/07/jquery-qrcode</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.com/jquery-qrcode'>jquery.qrcode.js</a>
is <em>jquery plugin for a pure browser qrcode generation</em>.
It allow you to easily add qrcode to your webpages.
It is standalone, less than 4k after minify+gzip, no image download.
It doesnt rely on external services which go on and off, or add latency while loading.
It is based on a <a href='http://www.d-project.com/qrcode/index.html'>library</a>
which build qrcode in various language. <a href='http://jeromeetienne.github.com/jquery-qrcode'>jquery.qrcode.js</a> wraps
it to make it easy to include in your own code.</p>

<p>Show, dont tell, here is a <a href='http://jeromeetienne.github.com/jquery-qrcode/examples/basic.html'>example</a></p>

<!-- more -->


<h2>How to Use It</h2>

<p>Let me walk you thru it. First include it in your webpage with the usual script tag</p>

<pre><code>&lt;script type="text/javascript" src="jquery.qrcode.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>Then create a DOM element which gonna contains the generated qrcode image. Lets say
a div</p>

<pre><code>&lt;div id="qrcode"&gt;&lt;/div&gt;
</code></pre>

<p>Then you add the <em>qrcode</em> in this container by</p>

<pre><code>jquery('#qrcode').qrcode("this plugin is great");
</code></pre>

<p>This is it. see it <a href='http://jeromeetienne.github.com/jquery-qrcode/examples/basic.html'>live</a>.</p>

<h2>Conclusion</h2>

<p><a href='http://jeromeetienne.github.com/jquery-qrcode'>jquery.qrcode.js</a> is available on github
<a href='https://github.com/jeromeetienne/jquery-qrcode'>here</a>
under <a href='https://github.com/jeromeetienne/jquery-qrcode/blob/master/MIT-LICENSE.txt'>MIT license</a>.
If you hit bugs, fill issues on github.
Feel free to fork, modify and have fun with it :)</p>
]]></content>
  </entry>
  
</feed>
